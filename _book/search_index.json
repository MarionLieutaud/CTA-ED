[["index.html", "Computational Text Analysis Course overview Assessment Fortnightly worksheets Fortnightly flash talks", " Computational Text Analysis Christopher Barrie 2021-12-17 Course overview In recent years, the use of computational techniques for the quantitative analysis of text has exploded. The volume and quantity of text data to which we now have access in the digital age is enormous. This has led social scientists to seek out new means of analyzing text data at scale. We will see that text records, be they in the form of digital traces left on social media platforms, archived works of literature, parliamentary speeches, video transcripts, or print news, can help us answer a huge range of important questions in social science. This course will give students training in the use of computational text analysis techniques. The course will prepare students for dissertation work that uses textual data and will provide hands-on training in the use of the R programming language and (some) Python. The course will provide a venue for seminar discussion of examples using these methods in the empirical social sciences as well as lectures on the technical and/or statistical dimensions of their application. We will be using this online book for the ten-week course in “Computational Text Analysis” (PGSP11584). Each chapter contains the readings for that week. The book also includes worksheets with example code for how to conduct some of the text analysis techniques we discuss each week. Each week, we will alternately be discussing the substantive and technical dimensions of published research in the empirical social sciences. The readings for each week contain two “substantive” readings–that is, examples of the application of text analysis techniques with empirical data–and one “technical” reading that focuses mainly on the statistical and computational aspects of a given technique. We will study first the technical aspects of analytical approaches and, second, the substantive dimensions of these applications. This means that, when discussing the readings, we will be able to discuss how satisfactory a given approach is for illuminating the question or topic at hand. Lectures will primarily be focused on these technical dimensions. The seminar (Q&amp;A) that follows will give us the opportunity to study and discuss questions of social scientific interest, and how computational text analysis had been used to answer these. NOTE: Before the end of Week 1, students should complete two introductory R exercises. First, you should consult the worksheet here, which is an introduction to setting up and understanding the very basics of working in R. Second, Ugur Ozdemir has provided such a more comprehensive introductory R course for the Research Training Centre at the University of Edinburgh and you can follow the instructions here to access this. Assessment Assessment takes the form of one summative assessment. This will be a 4000 word essay on a set of subjects or a subject of your choosing (with prior approval by me). For this, you will be required to select from a range of data sources I will provide. You may also suggest your own data source. You will be asked to formulate a research question and use at least one computational text analysis technique that we have studied over the course of the ten weeks. You will then provide the code they used in reproducible (markdown) format and will be assessed on both the substantive content of your essay contribution (the social science part) as well as their demonstrated competency in coding and text analysis (the computational part). Fortnightly worksheets Each fortnight, I will provide you with one worksheet that walks you through how to implement a different text analysis technique. At the end of these worksheets you will find a set of questions. You should buddy up with someone else in your class and go through these together. This is called “pair programming” and there’s a reason we do this. Firstly, coding can be an isolating and difficult thing—it’s good to bring a friend along for the ride. Secondly, if there’s something you don’t know, maybe your buddy will. This saves you both time! Thirdly, your buddy can check your code as you write it, and vice versa. Again, this means both of you are working together to produce something and check it as you go along. At the next week’s lecture, I will pick on a pair at random to answer each one of that worksheet’s questions (i.e., there is ~1/3 chance you’re going to get picked each week). I will ask you to walk us through your code. And remember: it’s also fine if you struggled and didn’t get to the end! If you encountered an obstacle, we can work through that together. All that matters to me is that you try. Fortnightly flash talks On the weeks where you are not going to be tasked with a coding assignment, you’re not off the hook! I will again be selecting a pair at random (the same as your coding pair) to talk me through one of the readings. I will pick different pair for each reading (i.e., ~ 1/3 chance…). Don’t stress too much about this: I just want two or three minutes where you lay out for me: 1) the research question; 2) the data source; 3) the method; 4) the findings; 5) what you thought its limitations were. For this last one, you will want to think about 1)-3); i.e., you will want to think about whether it really answered the research question, whether the data was appropriate for answering that question, and whether the method was appropriate for answering that question. And even if all three of these are reasonably solid, all articles have limitations so I want to hear about them! Final assessment The final assessment will take the form of one major summative assessment. This will be a 4000 word essay on a subject of the studentsÂ¿ choosing (with prior approval by the instructor) using a dataset of their own choosing and applying at least one computational text analysis technique. The students will provide the code they used in reproducible format and will be assessed on both the substantive content of their essay contribution as well as their demonstrated competency in coding and text analysis. "],["introduction-to-r.html", "Introduction to R 0.1 Getting started with R at home 0.2 Some basic information 0.3 Getting Started in RStudio 0.4 A simple example 0.5 Loading packages 0.6 Saving your objects, plots and scripts 0.7 Knowing where R saves your documents 0.8 Practicing in R 0.9 One final note 0.10 References", " Introduction to R This section is designed to ensure you are familiar with the R environment. 0.1 Getting started with R at home Given that we’re all working from home these days, you’ll need to download R and RStudio onto your own devices. R is the name of the programming language that we’ll be using for coding exercises; RStudio is the IDE (“Integrated Development Environment”), i.e., the piece of software that almost everyone uses when working in R. You can download both of these on Windows and Mac easily and for free. This is one of the first reasons to use an “open-source” programming language: it’s free! And this means everyone has access to it. Install R for Mac from here: https://cran.r-project.org/bin/macosx/. Install R for Windows from here: https://cran.r-project.org/bin/windows/base/. Download RStudio for Windows or Mac from here: https://rstudio.com/products/rstudio/download/, choosing the Free version: this is what most people use and is more than enough for all of our needs. All programs are free. Make sure to load everything listed above for your operating system or R will not work properly! 0.2 Some basic information A script is a text file in which you write your commands (code) and comments. If you put the # character in front of a line of text this line will not be executed; this is useful to add comments to your script! R is case sensitive, so be careful when typing. To send code from the script to the console, highlight the relevant line of code in your script and click on Run, or select the line and hit ctrl+enter on PCR or cmd+enter on Mac Access help files for R functions by preceding the name of the function with ? (e.g., ?table) By pressing the up key, you can go back to the commands you have used before Press the tab key to auto-complete variable names and commands 0.3 Getting Started in RStudio Begin by opening RStudio (located on the desktop). Your first task is to create a new script (this is where we will write our commands). To do so, click: File --&gt; NewFile --&gt; RScript Your screen should now have four panes: the Script (top left) the Console (bottom left) the Environment/History (top right) Files/Plots/Packages/Help/Viewer (bottom right) 0.4 A simple example The Script (top left) is where we write our commands for R. You can try this out for a first time by writing a small snipped of code as follows: x &lt;- &quot;I can&#39;t wait to learn Quantitative Research Methods&quot; #Note the quotation marks! To tell R to run the command, highlight the relevant row in your script and click the Run button (top right of the Script) - or hold down ctrl+enter on Windows or cmd+enter on Mac - to send the command to the Console (bottom left), where the actual evaluation and calculations are taking place. These shortcut keys will become very familiar to you very quickly! Running the command above creates an object named ‘x,’ that contains the words of your message. You can now see ‘x’ in the Environment (top right). To view what is contained in x, type in the Console (bottom left): print(x) ## [1] &quot;I can&#39;t wait to learn Quantitative Research Methods&quot; # or alternatively you can just type: x ## [1] &quot;I can&#39;t wait to learn Quantitative Research Methods&quot; 0.5 Loading packages The ‘base’ version of R is very powerful but it will not be able to do everything on its own, at least not with ease. For more technical or specialized forms of analysis, we will need to load new packages. This is when we will need to install a so-called ‘package’—a program that includes new tools (i.e., functions) to carry out specific tasks. You can think of them as ‘extensions’ enhancing R’s capacities. To take one example, we might want to do something a little more exciting than print how excited we are about this course. Let’s make a map instead. This might sound technical. But the beauty of the packaged extensions of R is that they contain functions to perform specialized types of analysis with ease. We’ll first need to install one of these packages, which you can do as below: install.packages(&quot;tidyverse&quot;) You can load the most recent version of packages using RStudio (by clicking Install under the packages tab of the bottom right pane and typing the name of your desired package) and ensuring the top drop down menu says install from Repository (CRAN). Keep Install dependencies ticked. After the package is installed, we then need to load it into our environment by typing library(). Note that, here, you don’t need to wrap the name of the package in quotation marks. So this will do the trick: library(tidyverse) What now? Well, let’s see just how easy it is to visualize some data using ggplot which is a package that comes bundled into the larger tidyverse package. ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) If we wanted to save where we’d got to with making our plots, we would want to save our scripts, and maybe the data we used as well, so that we could return to it at a later stage. 0.6 Saving your objects, plots and scripts Saving scripts: To save your script in RStudio (i.e. the top left panel), all you need to do is click File –&gt; Save As (and choose a name for your script). Your script will be something like: myfilename.R. Saving plots: If you have made any plots you would like to save, click Export (in the plotting pane) and choose a relevant file extension (e.g. .png, .pdf, etc.) and size. To save individual objects (for example x from above) from your environment, run the following command (choosing a suitable filename): save(x,file=&quot;myobject.RData&quot;) load(file=&quot;myobject.RData&quot;) To save all of your objects (i.e. everything in the top right panel) at once, run the following command (choosing a suitable filename): save.image(file=&quot;myfilname.RData&quot;) Your objects can be re-loaded into R during your next session by running: load(file=&quot;myfilename.RData&quot;) 0.7 Knowing where R saves your documents If you are at home, when you open a new script make sure to check and set your working directory (i.e. the folder where the files you create will be saved). To check your working directory use the getwd() command (type it into the Console or write it in your script in the Source Editor): getwd() To set your working directory, run the following command, substituting the file directory of your choice. Remember that anything following the `#’ symbol is simply a clarifying comment and R will not process it. ## Example for Mac setwd(&quot;/Users/Documents/mydir/&quot;) ## Example for PC setwd(&quot;c:/docs/mydir&quot;) 0.8 Practicing in R The best way to learn R is to use it. These workshops on text analysis will not be the place to become fully proficient in R. They will, however, be a chance to conduct some hands-on analysis with applied examples in a fast-expanding field. And the best way to learn is through doing. So give it a shot! For some further practice in the R programming language, look no further than Wickham and Grolemund (2017) and, for tidy text analysis, Silge and Robinson (2017). The free online book by Hadley Wickham “R for Data Science” is available here The free online book by Julia Silge and David Robinson “Text Mining with R” is available here For more practice with R, you may want to consult a set of interactive tutorials, available through the package “learnr.” Once you’ve installed this package, you can go through the tutorials yourselves by calling: library(learnr) available_tutorials() # this will tell you the names of the tutorials available run_tutorial(name = &quot;ex-data-basics&quot;, package = &quot;learnr&quot;) #this will launch the interactive tutorial in a new Internet browser window 0.9 One final note Once you’ve dipped into the “R for Data Science” book you’ll hear a lot about the so-called tidyverse in R. This is essentially a set of packages that use an alternative, and more intuitive, way of interacting with data. The main difference you’ll notice here is that, instead of having separate lines for each function we want to run, or wrapping functions inside functions, sets of functions are “piped” into each other using “pipe” functions, which look have the appearance: %&gt;%. I will be using “tidy” syntax in the weekly exercises for these computational text analysis workshops. If anything is unclear, I can provide the equivalents in “base” R too. but a lot of the useful text analysis packages are composed with tidy syntax. 0.10 References References "],["week-1.html", "Chapter 1 Week 1 1.1 Information retrieval and transformation", " Chapter 1 Week 1 1.1 Information retrieval and transformation Required reading: Grimmer and Stewart (2013) Gentzkow, Kelly, and Taddy (2019) Manning, Raghavan, and Schtze (2007, ch.1): https://nlp.stanford.edu/IR-book/information-retrieval-book.html] Further reading: Wilkerson and Casas (2017) DiMaggio (2015) References "],["week-2.html", "Chapter 2 Week 2 2.1 Word frequency and dictionary techniques", " Chapter 2 Week 2 2.1 Word frequency and dictionary techniques Required reading: Michel et al. (2011) Martins and Baumard (2020) Manning, Raghavan, and Schtze (2007, chs.2 and 3): https://nlp.stanford.edu/IR-book/information-retrieval-book.html] Further reading: Rozado, Al-Gharbi, and Halberstadt (2021) References "],["week-3.html", "Chapter 3 Week 3 3.1 Information retrieval and transformation", " Chapter 3 Week 3 3.1 Information retrieval and transformation Required reading: Michel et al. (2011) Rozado, Al-Gharbi, and Halberstadt (2021) Manning, Raghavan, and Schtze (2007, ch.2: https://nlp.stanford.edu/IR-book/information-retrieval-book.html) Further reading: References "],["week-4.html", "Chapter 4 Week 4 4.1 Information retrieval and transformation", " Chapter 4 Week 4 4.1 Information retrieval and transformation Required reading: Michel et al. (2011) Rozado, Al-Gharbi, and Halberstadt (2021) Manning, Raghavan, and Schtze (2007, ch.2: https://nlp.stanford.edu/IR-book/information-retrieval-book.html) Further reading: References "],["week-5.html", "Chapter 5 Week 5 5.1 Information retrieval and transformation", " Chapter 5 Week 5 5.1 Information retrieval and transformation Required reading: Michel et al. (2011) Rozado, Al-Gharbi, and Halberstadt (2021) Manning, Raghavan, and Schtze (2007, ch.2: https://nlp.stanford.edu/IR-book/information-retrieval-book.html) Further reading: References "],["week-6.html", "Chapter 6 Week 6 6.1 Information retrieval and transformation", " Chapter 6 Week 6 6.1 Information retrieval and transformation Required reading: Michel et al. (2011) Rozado, Al-Gharbi, and Halberstadt (2021) Manning, Raghavan, and Schtze (2007, ch.2: https://nlp.stanford.edu/IR-book/information-retrieval-book.html) Further reading: References "],["week-7.html", "Chapter 7 Week 7 7.1 Information retrieval and transformation", " Chapter 7 Week 7 7.1 Information retrieval and transformation Required reading: Michel et al. (2011) Rozado, Al-Gharbi, and Halberstadt (2021) Manning, Raghavan, and Schtze (2007, ch.2: https://nlp.stanford.edu/IR-book/information-retrieval-book.html) Further reading: References "],["week-8.html", "Chapter 8 Week 8 8.1 Information retrieval and transformation", " Chapter 8 Week 8 8.1 Information retrieval and transformation Required reading: Michel et al. (2011) Rozado, Al-Gharbi, and Halberstadt (2021) Manning, Raghavan, and Schtze (2007, ch.2: https://nlp.stanford.edu/IR-book/information-retrieval-book.html) Further reading: References "],["week-9.html", "Chapter 9 Week 9 9.1 Information retrieval and transformation", " Chapter 9 Week 9 9.1 Information retrieval and transformation Required reading: Michel et al. (2011) Rozado, Al-Gharbi, and Halberstadt (2021) Manning, Raghavan, and Schtze (2007, ch.2: https://nlp.stanford.edu/IR-book/information-retrieval-book.html) Further reading: References "],["week-10.html", "Chapter 10 Week 10 10.1 Information retrieval and transformation", " Chapter 10 Week 10 10.1 Information retrieval and transformation Required reading: Michel et al. (2011) Rozado, Al-Gharbi, and Halberstadt (2021) Manning, Raghavan, and Schtze (2007, ch.2: https://nlp.stanford.edu/IR-book/information-retrieval-book.html) Further reading: "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
